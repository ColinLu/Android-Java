apply plugin: 'maven-publish'
task javadocJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'javadoc'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

afterEvaluate{
    publishing {
        publications {
            // Creates a Maven publication called "myPublication".
            mypublishing(MavenPublication) {
                def projectName = project.name
                //自定义配置 groupId:artifactId:version
                groupId mavens.utils_group_id
                artifactId mavens.utils_artifact_id
                version mavens.utils_version
                artifact(javadocJar)
                artifact(sourceJar)
//                artifact publishArtifact    //Example: *./target/myJavaClasses.jar*
                artifact("$buildDir/outputs/aar/${projectName}-release.aar")
                println("url_remote:${mavens.url_remote}")
                println("url_local :${mavens.url_local}")
                println("publishing-->>${groupId}:${artifactId}:${version}")
                //带上依赖 ，否则会报错
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def scopes = [configurations.implementation]
                    if (configurations.hasProperty("api")) {
                        scopes.add(configurations.api)
                    }
                    if (configurations.hasProperty("implementation")) {
                        scopes.add(configurations.implementation)
                    }
                    if (configurations.hasProperty("debugImplementation")) {
                        scopes.add(configurations.debugImplementation)
                    }
                    if (configurations.hasProperty("releaseImplementation")) {
                        scopes.add(configurations.releaseImplementation)
                    }
                    if (configurations.hasProperty("compileOnly")) {
                        println("compileOnly :${configurations}")
                        scopes.add(configurations.compileOnly)
                    }

                    scopes.each { scope ->
                        scope.allDependencies.each {
                            if (it instanceof ModuleDependency) {
                                boolean isTransitive = ((ModuleDependency) it).transitive
                                if (!isTransitive) {
                                    println "<<<< not transitive dependency: [${it.group}, ${it.name}, ${it.version}]"
                                    return
                                }
                            }

                            if (it.group == "${project.rootProject.name}.libs" || it.version == 'unspecified') {
                                return
                            }

                            if (it.group && it.name && it.version) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                dependencyNode.appendNode('scope', scope.name)
                            }
                        }
                    }
                }
            }
        }

        // Repositories *to* which Gradle can publish artifacts
        repositories {
            //指定上传Maven仓库远程地址与账户密码
            maven {
                url = mavens.url_remote
                credentials {
                    username = mavens.username
                    password = mavens.password
                }
            }
            //指定上传Maven仓库本地地址
            mavenLocal {
                url = mavens.url_local
            }
        }
    }
}

